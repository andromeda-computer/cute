diff --git a/node_modules/deno-http-worker/deno-bootstrap/index.js b/deno-bootstrap/index.js
new file mode 100644
index 0000000000000000000000000000000000000000..10771fdc4b1467de7cb1500699bae641b71b764f
--- /dev/null
+++ b/deno-bootstrap/index.js
@@ -0,0 +1,71 @@
+const socketFile = Deno.args[0];
+const scriptType = Deno.args[1];
+const script = Deno.args[2];
+
+const importURL =
+  scriptType == "import"
+    ? script
+    : "data:text/tsx," + encodeURIComponent(script);
+
+const mod = await import(importURL);
+if (!mod.default) {
+  throw new Error("No default export found in script.");
+}
+if (typeof mod.default.fetch !== "function") {
+  throw new Error("Default export does not have a fetch function.");
+}
+
+const onError =
+  mod.default.onError ??
+  function (error) {
+    console.error(error);
+    return new Response("Internal Server Error", { status: 500 });
+  };
+const onListen = mod.default.onListen ?? function (_localAddr) {};
+
+// Use an empty onListen callback to prevent Deno from logging
+const server = Deno.serve(
+  {
+    path: socketFile,
+    onListen: onListen,
+    onError: onError,
+  },
+  (req) => {
+    const headerUrl = req.headers.get("X-Deno-Worker-URL");
+    if (!headerUrl) {
+      // This is just for the warming request, shouldn't be seen by clients.
+      return Response.json({ warming: true }, { status: 200 });
+    }
+    const url = new URL(headerUrl);
+    // Deno Request headers are immutable so we must make a new Request in order
+    // to delete our headers.
+    req = new Request(url.toString(), req);
+
+    // Restore host and connection headers.
+    req.headers.delete("host");
+    req.headers.delete("connection");
+    if (req.headers.has("X-Deno-Worker-Host"))
+      req.headers.set("host", req.headers.get("X-Deno-Worker-Host"));
+    if (req.headers.has("X-Deno-Worker-Connection"))
+      req.headers.set(
+        "connection",
+        req.headers.get("X-Deno-Worker-Connection")
+      );
+
+    req.headers.delete("X-Deno-Worker-URL");
+    req.headers.delete("X-Deno-Worker-Host");
+    req.headers.delete("X-Deno-Worker-Connection");
+    return mod.default.fetch(req);
+  }
+);
+
+globalThis.onerror = (e) => {
+  console.error(e.error);
+  e.preventDefault();
+};
+
+Deno.addSignalListener("SIGINT", async () => {
+  // On interrupt we only shut down the server. Deno will wait for all
+  // unresolved promises to complete before exiting.
+  await server.shutdown();
+});
diff --git a/dist/DenoHTTPWorker.js b/dist/DenoHTTPWorker.js
index c468e05cabe25e0574638b290e38b0d712bbbf17..4586aee6d7bf99133991486eb0f5bdeec8622577 100644
--- a/dist/DenoHTTPWorker.js
+++ b/dist/DenoHTTPWorker.js
@@ -7,7 +7,7 @@ import os from "node:os";
 import { fileURLToPath } from "url";
 const __filename = fileURLToPath(import.meta.url);
 const __dirname = path.dirname(__filename);
-const DEFAULT_DENO_BOOTSTRAP_SCRIPT_PATH = resolve(__dirname, "../deno-bootstrap/index.ts");
+const DEFAULT_DENO_BOOTSTRAP_SCRIPT_PATH = resolve(__dirname, "../deno-bootstrap/index.js");
 /**
  * Create a new DenoHTTPWorker. This function will start a worker and being
  */
